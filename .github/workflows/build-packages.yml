name: build-packages
on: [push, pull_request]
jobs:
  packages:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - {package: "dtc", os: "ubuntu-16.04", os-name: "linux", shell: "bash"}
          - {package: "dtc", os: "macos-latest", os-name: "osx", shell: "bash"}
          - {package: "wishbone-tool", os: "ubuntu-16.04", os-name: "linux", shell: "bash"}
          - {package: "wishbone-tool", os: "macos-latest", os-name: "osx", shell: "bash"}
          - {package: "wishbone-tool", os: "windows-latest", os-name: "windows", shell: "msys2"}
          - {package: "sigrok-cli", os: "ubuntu-16.04", os-name: "linux", shell: "bash"}
          - {package: "sigrok-cli", os: "macos-latest", os-name: "osx", shell: "bash"}
          - {package: "renode", os: "ubuntu-16.04", os-name: "linux", shell: "bash"}
          - {package: "renode", os: "macos-latest", os-name: "osx", shell: "bash"}
          - {package: "renode", os: "windows-latest", os-name: "windows", shell: "msys2"}
          - {package: "capnproto", os: "ubuntu-16.04", os-name: "linux", shell: "bash"}
          - {package: "zachjs-sv2v", os: "ubuntu-16.04", os-name: "linux", shell: "bash"}
          - {package: "capnproto-java", os: "ubuntu-16.04", os-name: "linux", shell: "bash"}
    defaults:
      run:
        shell: ${{ matrix.shell }} {0}
    steps:
    - name: Checkout workspace
      uses: actions/checkout@v2
    - uses: msys2/setup-msys2@v2
      if: matrix.os-name == 'windows'
      with:
        path-type: minimal
    - name: build
      env:
        PACKAGE: ${{ matrix.package }}
        OS_NAME: ${{ matrix.os-name }}
      run: |
        unset TMP
        unset TEMP
        source .github/scripts/common.sh
        bash .github/scripts/fixup-git.sh
        bash .github/scripts/download_sdk.sh
        source .github/scripts/common.sh
        bash .github/scripts/install.sh
        bash .github/scripts/script.sh
    - name: on_success
      env:
        PACKAGE: ${{ matrix.package }}
      if: steps.build.outcome == 'success'
      run: |
        source .github/scripts/after_success.sh
    - name: on_failure
      env:
        PACKAGE: ${{ matrix.package }}
      if: steps.build.outcome == 'failure'
      run: |
        source .github/scripts/after_failure.sh
